options {
    BUILD_PARSER = true;
    STATIC = false;
    ERROR_REPORTING = true;
    DEBUG_PARSER = false;
}

PARSER_BEGIN(WebMotionParser)
package parserjavacc;

import java.util.*;

public class WebMotionParser {

    public static Map<String, String> configurations = new HashMap<String, String>();
    public List<ParseException> syntaxErrors = new ArrayList<ParseException>();

    void recover(ParseException ex, int ... recoveryPoints) {
        syntaxErrors.add(ex);
        Token t;
        do {
            t = getNextToken();
        } while(t.kind != EOF && testRecoveryPoint(t.kind, recoveryPoints));
    }
    
    boolean testRecoveryPoint(int recoveryPoint, int ... recoveryPoints) {
        for (int test : recoveryPoints) {
            if (test == recoveryPoint) {
                return true;
            }
        }
        return false;
    }

    // Run the parser
    public static void main(String args[]) throws ParseException {
        WebMotionParser parser;

        try {
            parser = new WebMotionParser(new java.io.FileInputStream("test.wm"));
        } catch (java.io.FileNotFoundException e) {
            System.out.println("File not found.");
            return;
        }

        parser.Mapping();

        if (!parser.syntaxErrors.isEmpty()) {
            System.out.println("Parser: errors.");
            for (ParseException ex : parser.syntaxErrors) {
                ex.printStackTrace();
            }
        } else {
            System.out.println("Parser: successfully.");
        }
    }
}

PARSER_END(WebMotionParser)

TOKEN:
{
    <COMMENT: "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")*>
}
<SECTION_CONFIG> TOKEN: {<COMMENT_IN_CONFIG: <COMMENT>>}
<SECTION_ACTIONS> TOKEN: {<COMMENT_IN_ACTIONS: <COMMENT>>}
<SECTION_ERRORS> TOKEN: {<COMMENT_IN_ERRORS: <COMMENT>>}
<SECTION_FILTERS> TOKEN: {<COMMENT_IN_FILTERS: <COMMENT>>}
<SECTION_EXTENSIONS> TOKEN: {<COMMENT_IN_EXTENSIONS: <COMMENT>>}
<SECTION_PROPERTIES> TOKEN: {<COMMENT_IN_PROPERTIES: <COMMENT>>}

TOKEN: {
    <SECTION_CONFIG_NAME: "[config]" <NEW_LINE>> : SECTION_CONFIG
|   <SECTION_ACTIONS_NAME: "[actions]" <NEW_LINE>> : SECTION_ACTIONS
|   <SECTION_ERRORS_NAME: "[errors]" <NEW_LINE>> : SECTION_ERRORS
|   <SECTION_FILTERS_NAME: "[filters]" <NEW_LINE>> : SECTION_FILTERS
|   <SECTION_EXTENSIONS_NAME: "[extensions]" <NEW_LINE>> : SECTION_EXTENSIONS
|   <SECTION_PROPERTIES_NAME: "[" ((<LETTER> | <DIGIT> | "_" | "$" | "-")+ ".")? "properties]" <NEW_LINE>> : SECTION_PROPERTIES

|   <METHODS_HTTP: <METHOD_HTTP> ("," <METHOD_HTTP>)*>
|   <METHOD_HTTP: ("*" | "GET" | "POST" | "PUT" | "DELETE" | "HEAD")>

|   <ACTION_BASIC_JAVA: "action:">
|   <ACTION_JAVA: "action:" | "async:" | "sync:">
|   <ACTION_VIEW: "view:">
|   <ACTION_LINK: "forward:" | "redirect:" | "url:">

|   <VARIABLE: "{" (<QUALIFIED_IDENTIFIER>)? (<PATTERN>)? "}">
|   <PATTERN: "{" (<QUALIFIED_IDENTIFIER>)? (":" ((~["\n", "{", "}"]) | "\\{" | "\\}")+)? "}">

|   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|   <QUALIFIED_IDENTIFIER: <IDENTIFIER> ("." <IDENTIFIER>)*>

|   <NEW_LINE: ("\n" | "\r" | "\r\n")+>
|   <WHITESPACE: (" " | "\t" | "\f")+>
|   <DIGIT: ["0"-"9"]>
|   <LETTER: ["a"-"z", "A"-"Z"]>
}

<SECTION_CONFIG> TOKEN: {
    <SECTION_CONFIG_NEXT_CONFIG: <SECTION_CONFIG_NAME>> : SECTION_CONFIG
|   <SECTION_CONFIG_NEXT_ACTIONS: <SECTION_ACTIONS_NAME>> : SECTION_ACTIONS
|   <SECTION_CONFIG_NEXT_ERRORS: <SECTION_ERRORS_NAME>> : SECTION_ERRORS
|   <SECTION_CONFIG_NEXT_FILTERS: <SECTION_FILTERS_NAME>> : SECTION_FILTERS
|   <SECTION_CONFIG_NEXT_EXTENSIONS: <SECTION_EXTENSIONS_NAME>> : SECTION_EXTENSIONS
|   <SECTION_CONFIG_NEXT_PROPERTIES: <SECTION_PROPERTIES_NAME>> : SECTION_PROPERTIES

|   <CONFIG_KEY: "package.views"
                  | "package.base"
                  | "package.filters"
                  | "package.actions"
                  | "package.errors"
                  | "javac.debug"
                  | "server.async"
                  | "server.encoding"
                  | "server.error.page"
                  | "server.controller.scope"
                  | "server.listener.class"
                  | "server.main.handler.class"
                  | "server.secret"
                  | "server.static.autodetect"
                  | "default.render">
|   <CONFIG_EQUALS: "="> : SECTION_CONFIG_VALUE
}

<SECTION_CONFIG_VALUE> TOKEN: {
    <CONFIG_VALUE: (~["\n"])+>
|   <CONFIG_END: <NEW_LINE>> : SECTION_CONFIG
}

<SECTION_ACTIONS> TOKEN: {
    <SECTION_ACTIONS_NEXT_CONFIG: <SECTION_CONFIG_NAME>> : SECTION_CONFIG
|   <SECTION_ACTIONS_NEXT_ACTIONS: <SECTION_ACTIONS_NAME>> : SECTION_ACTIONS
|   <SECTION_ACTIONS_NEXT_ERRORS: <SECTION_ERRORS_NAME>> : SECTION_ERRORS
|   <SECTION_ACTIONS_NEXT_FILTERS: <SECTION_FILTERS_NAME>> : SECTION_FILTERS
|   <SECTION_ACTIONS_NEXT_EXTENSIONS: <SECTION_EXTENSIONS_NAME>> : SECTION_EXTENSIONS
|   <SECTION_ACTIONS_NEXT_PROPERTIES: <SECTION_PROPERTIES_NAME>> : SECTION_PROPERTIES

|   <ACTION_METHOD: <METHODS_HTTP>>
|   <ACTION_SEPARATOR: <WHITESPACE>> : SECTION_ACTIONS_PATH

|   <ACTION_ACTION_JAVA_BEGIN: <ACTION_JAVA>>
|   <ACTION_ACTION_VARIABLE: <VARIABLE>> : SECTION_ACTIONS_ACTION_JAVA
|   <ACTION_ACTION_IDENTIFIER: <IDENTIFIER>> : SECTION_ACTIONS_ACTION_JAVA

|   <ACTION_ACTION_VIEW: <ACTION_VIEW>> : SECTION_ACTIONS_ACTION_VIEW
|   <ACTION_ACTION_LINK: <ACTION_LINK>> : SECTION_ACTIONS_ACTION_LINK
}

<SECTION_ACTIONS_PATH> TOKEN: {
    <ACTION_PATH: "/">
|   <ACTION_PATH_VALUE: (<LETTER> | <DIGIT> | "_" | "$" | "-" | ".")+>
|   <ACTION_PATH_VARIABLE: <PATTERN>>
|   <ACTION_PARAMETERS_BEGIN: "?"> : SECTION_ACTIONS_PATH_PARAMETERS
|   <ACTION_PATH_END: <WHITESPACE>> : SECTION_ACTIONS
}

<SECTION_ACTIONS_PATH_PARAMETERS> TOKEN: {
    <ACTION_PATH_PARAMETER_NAME: (<LETTER> | <DIGIT> | "_" | "$" | "-" | ".")+>
|   <ACTION_PATH_PARAMETER_EQUALS: "="> : SECTION_ACTIONS_PATH_PARAMETER_VALUE
|   <ACTION_PATH_PARAMETER_OTHER: "&">
|   <ACTION_PATH_PARAMETER_SEPARATOR: <WHITESPACE>> : SECTION_ACTIONS
}

<SECTION_ACTIONS_PATH_PARAMETER_VALUE> TOKEN: {
    <ACTION_PATH_PARAMETER_VALUE: (<LETTER> | <DIGIT> | "_" | "$" | "-" | "." | "%" | "/")+> : SECTION_ACTIONS_PATH_PARAMETERS
|   <ACTION_PATH_PARAMETER_VALUE_VARIABLE: <PATTERN>> : SECTION_ACTIONS_PATH_PARAMETERS
|   <ACTION_PATH_PARAMETER_VALUE_OTHER: "&"> : SECTION_ACTIONS_PATH_PARAMETERS
|   <ACTION_PATH_PARAMETER_VALUE_SEPARATOR: <WHITESPACE>> : SECTION_ACTIONS
}

<SECTION_ACTIONS_ACTION_JAVA> TOKEN: {
    <ACTION_ACTION_JAVA_QUALIFIED_IDENTIFIER:  ".">
|   <ACTION_ACTION_JAVA_IDENTIFIER: <IDENTIFIER>>
|   <ACTION_ACTION_JAVA_VARIABLE: <VARIABLE>>
|   <ACTION_ACTION_JAVA_SEPARATOR: <WHITESPACE>> : SECTION_ACTIONS_PARAMETERS
|   <ACTION_ACTION_JAVA_END: <NEW_LINE>> : SECTION_ACTIONS
}

<SECTION_ACTIONS_ACTION_VIEW> TOKEN: {
    <ACTION_ACTION_VIEW_VALUE: (~["\n", "{", "}"] | "\\{" | "\\}")+>
|   <ACTION_ACTION_VIEW_VARIABLE: <VARIABLE>>
|   <ACTION_ACTION_VIEW_SEPARATOR: <WHITESPACE>> : SECTION_ACTIONS_PARAMETERS
|   <ACTION_ACTION_VIEW_END: <NEW_LINE>> : SECTION_ACTIONS
}

<SECTION_ACTIONS_ACTION_LINK> TOKEN: {
    <ACTION_ACTION_LINK_VALUE: (~["\n", "{", "}"] | "\\{" | "\\}")+>
|   <ACTION_ACTION_LINK_VARIABLE: <VARIABLE>>
|   <ACTION_ACTION_LINK_SEPARATOR: <WHITESPACE>> : SECTION_ACTIONS_PARAMETERS
|   <ACTION_ACTION_LINK_END: <NEW_LINE>> : SECTION_ACTIONS
}

<SECTION_ACTIONS_PARAMETERS> TOKEN: {
    <ACTION_PARAMETERS_SEPARATOR: <WHITESPACE>>
|   <ACTION_PARAMETER_NAME: (<LETTER> | <DIGIT> | "_" | "$" | "-" | ".")+>
|   <ACTION_PARAMETER_EQUALS: "="> : SECTION_ACTIONS_PARAMETER_VALUE
|   <ACTION_PARAMETER_SEPARATOR: ",">
|   <ACTION_END: <NEW_LINE>> : SECTION_ACTIONS
}

<SECTION_ACTIONS_PARAMETER_VALUE> TOKEN: {
    <ACTION_PARAMETER_VALUE: (<LETTER> | <DIGIT> | "_" | "$" | "-" | "." | "%" | "/")+>: SECTION_ACTIONS_PARAMETERS
|   <ACTION_PARAMETER_VALUE_SEPARATOR: ","> : SECTION_ACTIONS_PARAMETERS
|   <ACTION_PARAMETER_VALUE_END: <NEW_LINE>> : SECTION_ACTIONS
}

<SECTION_ERRORS> TOKEN: {
    <SECTION_ERRORS_NEXT_CONFIG: <SECTION_CONFIG_NAME>> : SECTION_CONFIG
|   <SECTION_ERRORS_NEXT_ACTIONS: <SECTION_ACTIONS_NAME>> : SECTION_ACTIONS
|   <SECTION_ERRORS_NEXT_ERRORS: <SECTION_ERRORS_NAME>> : SECTION_ERRORS
|   <SECTION_ERRORS_NEXT_FILTERS: <SECTION_FILTERS_NAME>> : SECTION_FILTERS
|   <SECTION_ERRORS_NEXT_EXTENSIONS: <SECTION_EXTENSIONS_NAME>> : SECTION_EXTENSIONS
|   <SECTION_ERRORS_NEXT_PROPERTIES: <SECTION_PROPERTIES_NAME>> : SECTION_PROPERTIES

|   <ERROR_CODE: "code:">
|   <ERROR_CODE_VALUE: <DIGIT><DIGIT><DIGIT>>
|   <ALL: "*">
|   <EXCEPTION: <QUALIFIED_IDENTIFIER>>
|   <ERROR_SEPARATOR: <WHITESPACE>> : SECTION_ERRORS_ACTIONS
}

<SECTION_ERRORS_ACTIONS> TOKEN: {
    <ERROR_ACTION_JAVA_BEGIN: <ACTION_BASIC_JAVA>> : SECTION_ERRORS_ACTIONS_VALUE
|   <ERROR_ACTION_VIEW_BEGIN: <ACTION_VIEW>> : SECTION_ERRORS_ACTIONS_VALUE
|   <ERROR_ACTION_LINK_BEGIN: <ACTION_LINK>> : SECTION_ERRORS_ACTIONS_VALUE

|   <ERROR_ACTION_JAVA: <QUALIFIED_IDENTIFIER>>
|   <ERROR_END: <NEW_LINE>> : SECTION_ERRORS
}

<SECTION_ERRORS_ACTIONS_VALUE> TOKEN: {
    <ERROR_ACTION_VALUE: (~["\n"])+>
|   <ERROR_VALUE_END: <NEW_LINE>> : SECTION_ERRORS
}

<SECTION_FILTERS> TOKEN: {
    <SECTION_FILTERS_NEXT_CONFIG: <SECTION_CONFIG_NAME>> : SECTION_CONFIG
|   <SECTION_FILTERS_NEXT_ACTIONS: <SECTION_ACTIONS_NAME>> : SECTION_ACTIONS
|   <SECTION_FILTERS_NEXT_ERRORS: <SECTION_ERRORS_NAME>> : SECTION_ERRORS
|   <SECTION_FILTERS_NEXT_FILTERS: <SECTION_FILTERS_NAME>> : SECTION_FILTERS
|   <SECTION_FILTERS_NEXT_EXTENSIONS: <SECTION_EXTENSIONS_NAME>> : SECTION_EXTENSIONS
|   <SECTION_FILTERS_NEXT_PROPERTIES: <SECTION_PROPERTIES_NAME>> : SECTION_PROPERTIES

|   <FILTER_METHOD: <METHODS_HTTP>>
|   <FILTER_PATH: "/" (<LETTER> | <DIGIT> | "_" | "$" | "-" | ".")*>
|   <FILTER_PATH_ALL: "/*">
|   <FILTER_SEPARATOR: <WHITESPACE>>

|   <FILTER_ACTION_BEGIN: <ACTION_BASIC_JAVA>>
|   <FILTER_ACTION: <QUALIFIED_IDENTIFIER>> : SECTION_FILTERS_PARAMETERS
}

<SECTION_FILTERS_PARAMETERS> TOKEN: {
    <FILTER_PARAMETERS_SEPARATOR: <WHITESPACE>>
|   <FILTER_PARAMETER_NAME: (<LETTER> | <DIGIT> | "_" | "$" | "-" | ".")+>
|   <FILTER_PARAMETER_EQUALS: "="> : SECTION_FILTERS_PARAMETER_VALUE
|   <FILTER_PARAMETER_SEPARATOR: ",">
|   <FILTER_END: <NEW_LINE>> : SECTION_FILTERS
}

<SECTION_FILTERS_PARAMETER_VALUE> TOKEN: {
    <FILTER_PARAMETER_VALUE: (<LETTER> | <DIGIT> | "_" | "$" | "-" | "." | "%" | "/")+> : SECTION_FILTERS_PARAMETERS
|   <FILTER_PARAMETER_VALUE_SEPARATOR: ","> : SECTION_FILTERS_PARAMETERS
|   <FILTER_PARAMETER_VALUE_END: <NEW_LINE>> : SECTION_FILTERS
}

<SECTION_EXTENSIONS> TOKEN: {
    <SECTION_EXTENSIONS_NEXT_CONFIG: <SECTION_CONFIG_NAME>> : SECTION_CONFIG
|   <SECTION_EXTENSIONS_NEXT_ACTIONS: <SECTION_ACTIONS_NAME>> : SECTION_ACTIONS
|   <SECTION_EXTENSIONS_NEXT_ERRORS: <SECTION_ERRORS_NAME>> : SECTION_ERRORS
|   <SECTION_EXTENSIONS_NEXT_FILTERS: <SECTION_FILTERS_NAME>> : SECTION_FILTERS
|   <SECTION_EXTENSIONS_NEXT_EXTENSIONS: <SECTION_EXTENSIONS_NAME>> : SECTION_EXTENSIONS
|   <SECTION_EXTENSIONS_NEXT_PROPERTIES: <SECTION_PROPERTIES_NAME>> : SECTION_PROPERTIES

|   <EXTENSION_PATH: "/" (<LETTER> | <DIGIT> | "_" | "$" | "-" | ".")*>
|   <EXTENSION_SEPARATOR: <WHITESPACE>> : SECTION_EXTENSIONS_FILE
}

<SECTION_EXTENSIONS_FILE> TOKEN: {
    <EXTENSION_FILE: (~["\n"])+>
|   <EXTENSION_END: <NEW_LINE>> : SECTION_EXTENSIONS
}

<SECTION_PROPERTIES> TOKEN: {
    <SECTION_PROPERTIES_NEXT_CONFIG: <SECTION_CONFIG_NAME>> : SECTION_CONFIG
|   <SECTION_PROPERTIES_NEXT_ACTIONS: <SECTION_ACTIONS_NAME>> : SECTION_ACTIONS
|   <SECTION_PROPERTIES_NEXT_ERRORS: <SECTION_ERRORS_NAME>> : SECTION_ERRORS
|   <SECTION_PROPERTIES_NEXT_FILTERS: <SECTION_FILTERS_NAME>> : SECTION_FILTERS
|   <SECTION_PROPERTIES_NEXT_EXTENSIONS: <SECTION_EXTENSIONS_NAME>> : SECTION_EXTENSIONS
|   <SECTION_PROPERTIES_NEXT_PROPERTIES: <SECTION_PROPERTIES_NAME>> : SECTION_PROPERTIES

|   <PROPERTIE_NAME: ((~["\n", "="]) | "\\=")+>
|   <PROPERTIE_EQUALS: "="> : SECTION_PROPERTIES_VALUE
}

<SECTION_PROPERTIES_VALUE> TOKEN: {
    <PROPERTIE_VALUE: (~["\n"] | ("\\" <NEW_LINE>))+>
|   <PROPERTIE_END: <NEW_LINE>> : SECTION_PROPERTIES
}

TOKEN:{<CHAR: ~[]>}
<SECTION_CONFIG> TOKEN: {<CHAR_IN_CONFIG: ~[]>}
<SECTION_CONFIG_VALUE> TOKEN: {<CHAR_IN_CONFIG_VALUE: ~[]>}
<SECTION_ACTIONS> TOKEN: {<CHAR_IN_ACTIONS: ~[]>}
<SECTION_ACTIONS_PATH> TOKEN: {<CHAR_IN_ACTIONS_PATH: ~[]>}
<SECTION_ACTIONS_PATH_PARAMETERS> TOKEN: {<CHAR_IN_ACTIONS_PATH_PARAMETERS: ~[]>}
<SECTION_ACTIONS_PATH_PARAMETER_VALUE> TOKEN: {<CHAR_IN_ACTIONS_PATH_PARAMETER_VALUE: ~[]>}
<SECTION_ACTIONS_ACTION_JAVA> TOKEN: {<CHAR_IN_ACTIONS_ACTION_JAVA: ~[]>}
<SECTION_ACTIONS_ACTION_VIEW> TOKEN: {<CHAR_IN_ACTIONS_ACTION_VIEW: ~[]>}
<SECTION_ACTIONS_ACTION_LINK> TOKEN: {<CHAR_IN_ACTIONS_ACTION_LINK: ~[]>}
<SECTION_ACTIONS_PARAMETERS> TOKEN: {<CHAR_IN_ACTIONS_PARAMETERS: ~[]>}
<SECTION_ACTIONS_PARAMETER_VALUE> TOKEN: {<CHAR_IN_ACTIONS_PARAMETER_VALUE: ~[]>}
<SECTION_ERRORS> TOKEN: {<CHAR_IN_ERRORS: ~[]>}
<SECTION_ERRORS_ACTIONS> TOKEN: {<CHAR_IN_ERRORS_ACTIONS: ~[]>}
<SECTION_ERRORS_ACTIONS_VALUE> TOKEN: {<CHAR_IN_ERRORS_ACTIONS_VALUE: ~[]>}
<SECTION_FILTERS> TOKEN: {<CHAR_IN_FILTERS: ~[]>}
<SECTION_FILTERS_PARAMETERS> TOKEN: {<CHAR_IN_FILTERS_PARAMETERS: ~[]>}
<SECTION_FILTERS_PARAMETER_VALUE> TOKEN: {<CHAR_IN_FILTERS_PARAMETER_VALUE: ~[]>}
<SECTION_EXTENSIONS> TOKEN: {<CHAR_IN_EXTENSIONS: ~[]>}
<SECTION_EXTENSIONS_FILE> TOKEN: {<CHAR_IN_EXTENSIONS_FILE: ~[]>}
<SECTION_PROPERTIES> TOKEN: {<CHAR_IN_PROPERTIES: ~[]>}
<SECTION_PROPERTIES_VALUE> TOKEN: {<CHAR_IN_PROPERTIES_VALUE: ~[]>}

void Mapping() : {}
{
    try {
        (
              SectionConfig() 
            | SectionActions() 
            | SectionErrors() 
            | SectionFilters()
            | SectionExtensions()
            | SectionProperties()
            | <COMMENT>
        )* <EOF>

    } catch (ParseException ex) {
        recover(ex, EOF);
    }
}

void SectionConfig() : {}
{
    SectionConfigName() (SectionConfigLine() | <COMMENT_IN_CONFIG>)*
}

void SectionConfigName() : {}
{
    (
          <SECTION_CONFIG_NAME>
        | <SECTION_CONFIG_NEXT_CONFIG>
        | <SECTION_ACTIONS_NEXT_CONFIG>
        | <SECTION_ERRORS_NEXT_CONFIG>
        | <SECTION_FILTERS_NEXT_CONFIG>
        | <SECTION_EXTENSIONS_NEXT_CONFIG>
        | <SECTION_PROPERTIES_NEXT_CONFIG>
    )
}

void SectionConfigLine() : {}
{
    {
        Token k = null;
        Token v = null;
    }
    try {
        k=<CONFIG_KEY> <CONFIG_EQUALS> (v=<CONFIG_VALUE>)? <CONFIG_END>
        {
            if (v != null) {
                configurations.put(k.image, v.image);
            }
        }
    } catch (ParseException ex) {
        recover(ex, CONFIG_END);
    }
}

void SectionActions() : {}
{
    SectionActionsName() (SectionActionsLine() | <COMMENT_IN_ACTIONS>)*
}

void SectionActionsName() : {}
{
    (
          <SECTION_ACTIONS_NAME>
        | <SECTION_CONFIG_NEXT_ACTIONS>
        | <SECTION_ACTIONS_NEXT_ACTIONS>
        | <SECTION_ERRORS_NEXT_ACTIONS>
        | <SECTION_FILTERS_NEXT_ACTIONS>
        | <SECTION_EXTENSIONS_NEXT_ACTIONS>
        | <SECTION_PROPERTIES_NEXT_ACTIONS>
    )
}

void SectionActionsLine() : {}
{
    try {
        <ACTION_METHOD>
        <ACTION_SEPARATOR>
        (<ACTION_PATH> ((<ACTION_PATH_VALUE> | <ACTION_PATH_VARIABLE>) (<ACTION_PATH>)?)*)
        (
            <ACTION_PARAMETERS_BEGIN> SectionActionsPathParameter()
            ((<ACTION_PATH_PARAMETER_OTHER> | <ACTION_PATH_PARAMETER_VALUE_OTHER>) SectionActionsPathParameter())*
        )?
        (<ACTION_PATH_END> | <ACTION_PATH_PARAMETER_SEPARATOR> | <ACTION_PATH_PARAMETER_VALUE_SEPARATOR>)
        (
            ((<ACTION_ACTION_JAVA_BEGIN>)? (<ACTION_ACTION_VARIABLE> | <ACTION_ACTION_IDENTIFIER>)+ ((<ACTION_ACTION_JAVA_QUALIFIED_IDENTIFIER>) (<ACTION_ACTION_JAVA_VARIABLE> | <ACTION_ACTION_JAVA_IDENTIFIER>)+)+)
            | (<ACTION_ACTION_VIEW> (<ACTION_ACTION_VIEW_VALUE> | <ACTION_ACTION_VIEW_VARIABLE>)+)
            | (<ACTION_ACTION_LINK> (<ACTION_ACTION_LINK_VALUE> | <ACTION_ACTION_LINK_VARIABLE>)+)
        )
        (
            (<ACTION_ACTION_JAVA_SEPARATOR> | <ACTION_ACTION_VIEW_SEPARATOR> | <ACTION_ACTION_LINK_SEPARATOR>)
            SectionActionsParameter() ((<ACTION_PARAMETER_SEPARATOR> | <ACTION_PARAMETER_VALUE_SEPARATOR>) SectionActionsParameter())*
        )?
        (<ACTION_ACTION_JAVA_END> | <ACTION_ACTION_VIEW_END> | <ACTION_ACTION_LINK_END> | <ACTION_PARAMETER_VALUE_END> | <ACTION_END>)

    } catch (ParseException ex) {
        recover(ex, ACTION_ACTION_JAVA_END, ACTION_ACTION_VIEW_END, ACTION_ACTION_LINK_END, ACTION_PARAMETER_VALUE_END, ACTION_END);
    }
}

void SectionActionsPathParameter() : {}
{
    <ACTION_PATH_PARAMETER_NAME> (<ACTION_PATH_PARAMETER_EQUALS> (<ACTION_PATH_PARAMETER_VALUE> | <ACTION_PATH_PARAMETER_VALUE_VARIABLE>)?)?
}

void SectionActionsParameter() : {}
{
    <ACTION_PARAMETER_NAME> <ACTION_PARAMETER_EQUALS> (<ACTION_PARAMETER_VALUE>)?
}

void SectionErrors() : {}
{
    SectionErrorsName() (SectionErrorsLine() | <COMMENT_IN_ERRORS>)*
}

void SectionErrorsName() : {}
{
    (
          <SECTION_ERRORS_NAME>
        | <SECTION_CONFIG_NEXT_ERRORS>
        | <SECTION_ACTIONS_NEXT_ERRORS>
        | <SECTION_ERRORS_NEXT_ERRORS>
        | <SECTION_FILTERS_NEXT_ERRORS>
        | <SECTION_EXTENSIONS_NEXT_ERRORS>
        | <SECTION_PROPERTIES_NEXT_ERRORS>
    )
}

void SectionErrorsLine() : {}
{
    try {
        (<ALL> | <ERROR_CODE> <ERROR_CODE_VALUE> | <EXCEPTION>) 
        <ERROR_SEPARATOR>
        (
            (<ERROR_ACTION_JAVA_BEGIN>)? <ERROR_ACTION_JAVA>
          | <ERROR_ACTION_VIEW_BEGIN> <ERROR_ACTION_VALUE>
          | <ERROR_ACTION_LINK_BEGIN> <ERROR_ACTION_VALUE>
        )
        (<ERROR_END> | <ERROR_VALUE_END>)

    } catch (ParseException ex) {
        recover(ex, ERROR_END);
    }
}

void SectionFilters() : {}
{
    SectionFiltersName() (SectionFiltersLine() | <COMMENT_IN_FILTERS>)*
}

void SectionFiltersName() : {}
{
    (
          <SECTION_FILTERS_NAME>
        | <SECTION_CONFIG_NEXT_FILTERS>
        | <SECTION_ACTIONS_NEXT_FILTERS>
        | <SECTION_ERRORS_NEXT_FILTERS>
        | <SECTION_FILTERS_NEXT_FILTERS>
        | <SECTION_EXTENSIONS_NEXT_FILTERS>
        | <SECTION_PROPERTIES_NEXT_FILTERS>
    )
}

void SectionFiltersLine() : {}
{
    try {
        <FILTER_METHOD>
        <FILTER_SEPARATOR>
        (<FILTER_PATH> | <FILTER_PATH_ALL>)+
        <FILTER_SEPARATOR>
        (<FILTER_ACTION_BEGIN>)? <FILTER_ACTION>
        (
            <FILTER_PARAMETERS_SEPARATOR>
            SectionFiltersParameter() ((<FILTER_PARAMETER_SEPARATOR> | <FILTER_PARAMETER_VALUE_SEPARATOR>) SectionFiltersParameter())*
        )?
        (<FILTER_END> | <FILTER_PARAMETER_VALUE_END>)

    } catch (ParseException ex) {
        recover(ex, FILTER_END, FILTER_PARAMETER_VALUE_END);
    }
}

void SectionFiltersParameter() : {}
{
    <FILTER_PARAMETER_NAME> <FILTER_PARAMETER_EQUALS> (<FILTER_PARAMETER_VALUE>)?
}

void SectionExtensions() : {}
{
    SectionExtensionsName() (SectionExtensionsLine() | <COMMENT_IN_EXTENSIONS>)*
}

void SectionExtensionsName() : {}
{
    (
          <SECTION_EXTENSIONS_NAME>
        | <SECTION_CONFIG_NEXT_EXTENSIONS>
        | <SECTION_ACTIONS_NEXT_EXTENSIONS>
        | <SECTION_ERRORS_NEXT_EXTENSIONS>
        | <SECTION_FILTERS_NEXT_EXTENSIONS>
        | <SECTION_EXTENSIONS_NEXT_EXTENSIONS>
        | <SECTION_PROPERTIES_NEXT_EXTENSIONS>
    )
}

void SectionExtensionsLine() : {}
{
    try {
        (<EXTENSION_PATH>)+ <EXTENSION_SEPARATOR> <EXTENSION_FILE> <EXTENSION_END>

    } catch (ParseException ex) {
        recover(ex, EXTENSION_END);
    }
}

void SectionProperties() : {}
{
    SectionPropertiesName() (SectionPropertiesLine() | <COMMENT_IN_PROPERTIES>)*
}

void SectionPropertiesName() : {}
{
    (
          <SECTION_PROPERTIES_NAME>
        | <SECTION_CONFIG_NEXT_PROPERTIES>
        | <SECTION_ACTIONS_NEXT_PROPERTIES>
        | <SECTION_ERRORS_NEXT_PROPERTIES>
        | <SECTION_FILTERS_NEXT_PROPERTIES>
        | <SECTION_EXTENSIONS_NEXT_PROPERTIES>
        | <SECTION_PROPERTIES_NEXT_PROPERTIES>
    )
}

void SectionPropertiesLine() : {}
{
    try {
        <PROPERTIE_NAME> <PROPERTIE_EQUALS> (<PROPERTIE_VALUE>)? <PROPERTIE_END>

    } catch (ParseException ex) {
        recover(ex, PROPERTIE_END);
    }
}
